//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Student : Person {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Student(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FLEXPINVOKE.Student_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Student obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Student obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FLEXPINVOKE.delete_Student(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Attendance attendance {
    set {
      FLEXPINVOKE.Student_attendance_set(swigCPtr, Attendance.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FLEXPINVOKE.Student_attendance_get(swigCPtr);
      Attendance ret = (cPtr == global::System.IntPtr.Zero) ? null : new Attendance(cPtr, false);
      return ret;
    } 
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8, string arg9, string arg10, string arg11, bool arg12, string arg13, string arg14) : this(FLEXPINVOKE.new_Student__SWIG_0(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8, string arg9, string arg10, string arg11, bool arg12, string arg13) : this(FLEXPINVOKE.new_Student__SWIG_1(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8, string arg9, string arg10, string arg11, bool arg12) : this(FLEXPINVOKE.new_Student__SWIG_2(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8, string arg9, string arg10, string arg11) : this(FLEXPINVOKE.new_Student__SWIG_3(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8, string arg9, string arg10) : this(FLEXPINVOKE.new_Student__SWIG_4(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8, string arg9) : this(FLEXPINVOKE.new_Student__SWIG_5(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7, string arg8) : this(FLEXPINVOKE.new_Student__SWIG_6(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6, string arg7) : this(FLEXPINVOKE.new_Student__SWIG_7(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5, string arg6) : this(FLEXPINVOKE.new_Student__SWIG_8(arg0, arg1, arg2, arg3, arg4, arg5, arg6), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4, char arg5) : this(FLEXPINVOKE.new_Student__SWIG_9(arg0, arg1, arg2, arg3, arg4, arg5), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3, string arg4) : this(FLEXPINVOKE.new_Student__SWIG_10(arg0, arg1, arg2, arg3, arg4), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2, string arg3) : this(FLEXPINVOKE.new_Student__SWIG_11(arg0, arg1, arg2, arg3), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1, string arg2) : this(FLEXPINVOKE.new_Student__SWIG_12(arg0, arg1, arg2), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0, string arg1) : this(FLEXPINVOKE.new_Student__SWIG_13(arg0, arg1), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student(string arg0) : this(FLEXPINVOKE.new_Student__SWIG_14(arg0), true) {
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public Student() : this(FLEXPINVOKE.new_Student__SWIG_15(), true) {
  }

  public void setBloodGroup(string arg0) {
    FLEXPINVOKE.Student_setBloodGroup(swigCPtr, arg0);
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getBloodGroup() {
    string ret = FLEXPINVOKE.Student_getBloodGroup(swigCPtr);
    return ret;
  }

  public void setRollNo(string arg0) {
    FLEXPINVOKE.Student_setRollNo(swigCPtr, arg0);
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getRollNo() {
    string ret = FLEXPINVOKE.Student_getRollNo(swigCPtr);
    return ret;
  }

  public void setMarks(string arg0) {
    FLEXPINVOKE.Student_setMarks(swigCPtr, arg0);
    if (FLEXPINVOKE.SWIGPendingException.Pending) throw FLEXPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getMarks() {
    string ret = FLEXPINVOKE.Student_getMarks(swigCPtr);
    return ret;
  }

  public void setFeeStatus(bool arg0) {
    FLEXPINVOKE.Student_setFeeStatus(swigCPtr, arg0);
  }

  public string getFeeStatus() {
    string ret = FLEXPINVOKE.Student_getFeeStatus(swigCPtr);
    return ret;
  }

}
